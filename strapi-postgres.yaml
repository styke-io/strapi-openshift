apiVersion: v1
kind: Template
metadata:
  name: strapi
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: strapi
  spec:
    tags:
    - name: '${STRAPI_VERSION}'
      annotations:
        description: The strapi image from hub.docker.com/r/styke/strapi-openshift
        openshift.io/display-name: 'Strapi ${STRAPI_VERSION}'
        tags: strapi
        version: '${STRAPI_VERSION}'
      from:
        kind: DockerImage
        name: 'styke/strapi-openshift:${STRAPI_VERSION}'
      importPolicy:
        scheduled: true

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: strapi
  spec:
    selector:
      name: strapi
    replicas: 1
    template:
      metadata:
        labels:
          name: strapi
      spec:
        containers:
        - image: strapi
          imagePullPolicy: Always
          name: strapi
          env:
          - name: APP_NAME
            value: '${APP_NAME}'
          - name: DATABASE_CLIENT
            value: 'postgres'
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                key: database-name
                name: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${DATABASE_SERVICE_NAME}"
          volumeMounts:
          - name: strapi-volume
            mountPath: /usr/src/api/strapi-app
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            tcpSocket:
              port: 1337
          readinessProbe:
            httpGet:
              path: /
              port: 1337
              scheme: HTTP
            periodSeconds: 10
        volumes:
        - name: strapi-volume
          persistentVolumeClaim:
            claimName: strapi
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - strapi
        from:
          kind: ImageStreamTag
          name: 'strapi:${STRAPI_VERSION}'
    - type: ConfigChange

- kind: Service
  apiVersion: v1
  metadata:
    name: strapi
  spec:
    ports:
      - name: strapi
        port: 1337
        targetPort: 1337
        deploymentconfig: strapi
    selector:
      name: strapi

- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: strapi
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- kind: Secret
  apiVersion: v1
  metadata:
    annotations:
      template.openshift.io/expose-database_name: "{.data['database-name']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-username: "{.data['database-user']}"
    name: "${DATABASE_SERVICE_NAME}"
  stringData:
    database-name: "${DATABASE_NAME}"
    database-password: "${DATABASE_PASSWORD}"
    database-user: "${DATABASE_USERNAME}"

- kind: Service
  apiVersion: v1
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "${DATABASE_SERVICE_NAME}"
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${DATABASE_SERVICE_NAME}"
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: "${DATABASE_SERVICE_NAME}"
          image: " "
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - "/usr/libexec/check-container"
              - "--live"
            initialDelaySeconds: 120
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - "/usr/libexec/check-container"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: "/dev/termination-log"
          volumeMounts:
          - mountPath: "/var/lib/pgsql/data"
            name: "${DATABASE_SERVICE_NAME}-data"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${POSTGRESQL_VERSION}
          namespace: "${NAMESPACE}"
        lastTriggeredImage: ''
      type: ImageChange
    - type: ConfigChange
  status: {}
parameters:
- name: STRAPI_VERSION
  displayName: Strapi Version
  required: true
  value: latest
- name: APP_NAME
  displayName: App Name
  required: true
  value: strapi-app
- name: DATABASE_NAME
  displayName: Database Name
  required: true
  value: strapi
- name: DATABASE_USERNAME
  displayName: Database User
  from: user[A-Z0-9]{3}
  generate: expression
  required: true
- name: DATABASE_PASSWORD
  displayName: Database Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  required: true

- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Version of PostgreSQL image to be used (9.4, 9.5, 9.6 or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: "9.4"